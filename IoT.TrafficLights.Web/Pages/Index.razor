@page "/"
@using IoT.TrafficLights.Web.Services
@using IoT.TrafficLights.Web.Models
@using System.Text.Json

<PageTitle>IoT Traffic Lights</PageTitle>

@inject IJSRuntime JsRuntime
@inject IAdminService AdminService
@inject WebConfiguration WebConfiguration

<h3>IoT Traffic Lights</h3>

<div class="my-3">
    <h4>Web Configuration</h4>
    <pre>@JsonSerializer.Serialize(WebConfiguration, new JsonSerializerOptions { WriteIndented = true })</pre>
</div>

<div class="my-3">
    <h4>Api Connectivity</h4>
    <p>@_apiPing</p>
</div>

<div class="my-3">
    <h4>Api Configuration</h4>
    <pre>@JsonSerializer.Serialize(_apiConfiguration, new JsonSerializerOptions { WriteIndented = true })</pre>
</div>

<div class="my-3">
    <h4>Database Browser</h4>
    <button class="btn btn-primary w-100" @onclick="LaunchDatabaseBrowser">Launch Database Browser</button>
</div>

@code {
    private string? _apiPing;

    private object? _apiConfiguration;

    protected override async Task OnInitializedAsync()
    {
        var apiPing = await AdminService.Ping();
        _apiPing = apiPing ? "Connected" : "Not Connected!!!";
        var apiConfiguration = await AdminService.Config();
        _apiConfiguration = JsonSerializer.Deserialize<object>(apiConfiguration!, new JsonSerializerOptions { WriteIndented = true });
    }

    protected async void LaunchDatabaseBrowser(EventArgs args)
    {
        switch (WebConfiguration.Repository!.Type)
        {
            case "SQLite":
                var port = WebConfiguration.Environment switch
                {
                    "Development" => 3017,
                    "Test" => 3018,
                    "Production" => 3019,
                    _ => 0
                };
                var url = await JsRuntime.InvokeAsync<string>("prompt", "SQLite Browser URL:", $"http://localhost:{port}");
                await JsRuntime.InvokeVoidAsync("open", url, "_blank");
                break;

            case "MySql":
                await JsRuntime.InvokeAsync<string>("alert", $"Use MySql Workbench Client: {WebConfiguration.Repository.MySql!.Url}");
                break;

            case "MongoDb":
                await JsRuntime.InvokeAsync<string>("alert", $"Use MongoDb Compass Client: {WebConfiguration.Repository.MongoDb!.Url}");
                break;

            default:
                await JsRuntime.InvokeAsync<string>("alert", "No database detected!!!");
                break;
        }
    }
}